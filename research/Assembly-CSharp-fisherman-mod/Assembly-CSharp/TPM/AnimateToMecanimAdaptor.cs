using System;
using System.Collections.Generic;
using UnityEngine;

namespace TPM
{
	public class AnimateToMecanimAdaptor
	{
		static AnimateToMecanimAdaptor()
		{
			foreach (KeyValuePair<string, int> keyValuePair in AnimateToMecanimAdaptor._table)
			{
				if (!AnimateToMecanimAdaptor._ignoreAnimations.Contains(keyValuePair.Key))
				{
					if (AnimateToMecanimAdaptor._backTable.ContainsKey(keyValuePair.Value))
					{
						LogHelper.Error("Same hash found for animation {0}", new object[] { keyValuePair.Key });
					}
					AnimateToMecanimAdaptor._backTable[keyValuePair.Value] = keyValuePair.Key;
				}
			}
		}

		public static int GetHashForAnimateAnimation(string clipName)
		{
			if (AnimateToMecanimAdaptor._table.ContainsKey(clipName))
			{
				return AnimateToMecanimAdaptor._table[clipName];
			}
			if (!AnimateToMecanimAdaptor._ignoreAnimations.Contains(clipName))
			{
				LogHelper.Warning("Can't find analog for {0} first person animation. Add it to _table map please", new object[] { clipName });
			}
			return 0;
		}

		public static string GetAnimationForHash(int hash)
		{
			if (AnimateToMecanimAdaptor._backTable.ContainsKey(hash))
			{
				return AnimateToMecanimAdaptor._backTable[hash];
			}
			return null;
		}

		private static HashSet<string> _ignoreAnimations = new HashSet<string>
		{
			"drawBox", "Back_drawBox", "KayakOarDraw", "empty", "Walk", "KayakOarRowIn", "KayakOarRowOut", "KayakOarIdle", "KayakOarRowLeftIn", "KayakOarRowRightIn",
			"RMBTakeThrottle", "RMBIdle"
		};

		private static Dictionary<string, int> _table = new Dictionary<string, int>
		{
			{
				"DrawToIdlePitch",
				Animator.StringToHash("drawToIdlePitch")
			},
			{
				"BaitDrawToIdlePitch",
				Animator.StringToHash("BaitDrawToIdlePitch")
			},
			{
				"OpenDraw",
				Animator.StringToHash("draw")
			},
			{
				"BaitDraw",
				Animator.StringToHash("BaitDraw")
			},
			{
				"Idle",
				Animator.StringToHash("idle")
			},
			{
				"BaitIdle",
				Animator.StringToHash("BaitIdle")
			},
			{
				"IdlePitch",
				Animator.StringToHash("idlePitch")
			},
			{
				"BaitIdlePitch",
				Animator.StringToHash("BaitIdlePitch")
			},
			{
				"ThrowPitch",
				Animator.StringToHash("throwPitch")
			},
			{
				"BaitThrowPitch",
				Animator.StringToHash("BaitThrowPitch")
			},
			{
				"ThrowOneHandIn",
				Animator.StringToHash("throwOneHandIn")
			},
			{
				"BaitThrowOneHandIn",
				Animator.StringToHash("BaitThrowOneHandIn")
			},
			{
				"ThrowOneHandRightIn",
				Animator.StringToHash("throwOneHandRightIn")
			},
			{
				"BaitThrowRightIn",
				Animator.StringToHash("BaitThrowRightIn")
			},
			{
				"ThrowOneHandLeftIn",
				Animator.StringToHash("throwOneHandLeftIn")
			},
			{
				"BaitThrowLeftIn",
				Animator.StringToHash("BaitThrowLeftIn")
			},
			{
				"throwIn",
				Animator.StringToHash("throwIn")
			},
			{
				"BaitThrow2HandsIn",
				Animator.StringToHash("BaitThrow2HandsIn")
			},
			{
				"ThrowOneHandOut",
				Animator.StringToHash("throwOneHandOut")
			},
			{
				"BaitThrowOneHandOut",
				Animator.StringToHash("BaitThrowOneHandOut")
			},
			{
				"ThrowOneHandRightOut",
				Animator.StringToHash("throwOneHandRightOut")
			},
			{
				"BaitThrowRightOut",
				Animator.StringToHash("BaitThrowRightOut")
			},
			{
				"ThrowOneHandLeftOut",
				Animator.StringToHash("throwOneHandLeftOut")
			},
			{
				"BaitThrowLeftOut",
				Animator.StringToHash("BaitThrowLeftOut")
			},
			{
				"throwOut",
				Animator.StringToHash("throwOut")
			},
			{
				"BaitThrow2HandsOut",
				Animator.StringToHash("BaitThrow2HandsOut")
			},
			{
				"ThrowWait",
				Animator.StringToHash("throwWait")
			},
			{
				"BaitThrownIdle",
				Animator.StringToHash("BaitThrownIdle")
			},
			{
				"CloseRollStart",
				Animator.StringToHash("closeRollStart")
			},
			{
				"BaitThrow2Idle",
				Animator.StringToHash("BaitThrow2Idle")
			},
			{
				"IdleThrown",
				Animator.StringToHash("idleThrown")
			},
			{
				"BaitIdleThrown",
				Animator.StringToHash("BaitIdleThrown")
			},
			{
				"Roll",
				Animator.StringToHash("roll")
			},
			{
				"BaitRoll",
				Animator.StringToHash("BaitRoll")
			},
			{
				"Idle2Roll1",
				Animator.StringToHash("idle2Roll1")
			},
			{
				"BaitRoll2Idle",
				Animator.StringToHash("BaitRoll2Idle")
			},
			{
				"IdleThrownToIdlePitch",
				Animator.StringToHash("idleThrownToIdlePitch")
			},
			{
				"BaitIdleThrownToIdlePitch",
				Animator.StringToHash("BaitIdleThrownToIdlePitch")
			},
			{
				"IdleToPitchIdle",
				Animator.StringToHash("idleToPitchIdle")
			},
			{
				"BaitIdleToPitchIdle",
				Animator.StringToHash("BaitIdleToPitchIdle")
			},
			{
				"PitchIdleToIdle",
				Animator.StringToHash("pitchIdleToIdle")
			},
			{
				"BaitPitchIdleToIdle",
				Animator.StringToHash("BaitPitchIdleToIdle")
			},
			{
				"PitchToIdleThrown",
				Animator.StringToHash("pitchToIdleThrown")
			},
			{
				"BaitPitchToIdleThrown",
				Animator.StringToHash("BaitPitchToIdleThrown")
			},
			{
				"FishMouthIn",
				Animator.StringToHash("fishMouthIn")
			},
			{
				"BaitFishMouthIn",
				Animator.StringToHash("BaitFishMouthIn")
			},
			{
				"FishMouthIdle",
				Animator.StringToHash("fishMouthIdle")
			},
			{
				"BaitFishMouthIdle",
				Animator.StringToHash("BaitFishMouthIdle")
			},
			{
				"FishMouthOut",
				Animator.StringToHash("fishMouthOut")
			},
			{
				"BaitFishMouthOut",
				Animator.StringToHash("BaitFishMouthOut")
			},
			{
				"FishLineIn",
				Animator.StringToHash("fishLineIn")
			},
			{
				"BaitFishLineIn",
				Animator.StringToHash("BaitFishLineIn")
			},
			{
				"FishLineIdle",
				Animator.StringToHash("fishLineIdle")
			},
			{
				"BaitFishLineIdle",
				Animator.StringToHash("BaitFishLineIdle")
			},
			{
				"FishLineOut",
				Animator.StringToHash("fishLineOut")
			},
			{
				"BaitFishLineOut",
				Animator.StringToHash("BaitFishLineOut")
			},
			{
				"Back_DrawToIdlePitch",
				Animator.StringToHash("Back_drawToIdlePitch")
			},
			{
				"Back_BaitDrawToIdlePitch",
				Animator.StringToHash("Back_BaitDrawToIdlePitch")
			},
			{
				"Back_OpenDraw",
				Animator.StringToHash("Back_draw")
			},
			{
				"Back_BaitDraw",
				Animator.StringToHash("Back_BaitDraw")
			},
			{
				"idleBox",
				Animator.StringToHash("box_idle")
			},
			{
				"putBox",
				Animator.StringToHash("putting_down")
			},
			{
				"drawBox",
				Animator.StringToHash("box_idle")
			},
			{
				"Back_drawBox",
				Animator.StringToHash("box_idle")
			},
			{
				"FishGripIn",
				Animator.StringToHash("fishGripIn")
			},
			{
				"FishGripIdle",
				Animator.StringToHash("fishGripIdle")
			},
			{
				"FishGripOut",
				Animator.StringToHash("fishGripOut")
			},
			{
				"BaitFishGripIn",
				Animator.StringToHash("BaitFishGripIn")
			},
			{
				"BaitFishGripIdle",
				Animator.StringToHash("BaitFishGripIdle")
			},
			{
				"BaitFishGripOut",
				Animator.StringToHash("BaitFishGripOut")
			},
			{
				"PutRodOnPodCasting",
				Animator.StringToHash("PutRodOnPodCasting")
			},
			{
				"PutRodOnPod",
				Animator.StringToHash("PutRodOnPod")
			},
			{
				"StandUpWithoutRod",
				Animator.StringToHash("StandUpWithoutRod")
			},
			{
				"TakeRodFromPodCasting",
				Animator.StringToHash("TakeRodFromPodCasting")
			},
			{
				"TakeRodFromPod",
				Animator.StringToHash("TakeRodFromPod")
			},
			{
				"StandUpWithRodCasting",
				Animator.StringToHash("StandUpWithRodCasting")
			},
			{
				"StandUpWithRod",
				Animator.StringToHash("StandUpWithRod")
			},
			{
				"RPSLeanWithCasting",
				Animator.StringToHash("RPSLeanWithCasting")
			},
			{
				"RPSLeanWithSpin",
				Animator.StringToHash("RPSLeanWithSpin")
			},
			{
				"RPSPutCastingOnPod",
				Animator.StringToHash("RPSPutCastingOnPod")
			},
			{
				"RPSPutSpinOnPod",
				Animator.StringToHash("RPSPutSpinOnPod")
			},
			{
				"RPSStandUpWithCastingSwap",
				Animator.StringToHash("RPSStandUpWithCastingSwap")
			},
			{
				"RPSStandUpWithSpin",
				Animator.StringToHash("RPSStandUpWithSpin")
			},
			{
				"RPSStandUpWithCasting",
				Animator.StringToHash("RPSStandUpWithCasting")
			},
			{
				"RPSStandUpWithSpinSwap",
				Animator.StringToHash("RPSStandUpWithSpinSwap")
			}
		};

		private static Dictionary<int, string> _backTable = new Dictionary<int, string>();
	}
}
